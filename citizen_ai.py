# -*- coding: utf-8 -*-
"""citizen_ai.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eCGb6v__R2JhnrPY310Z0Qa7lege-5gc
"""

# run this project file in google collab by changing run type to T4 GPU

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import re

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def city_analysis(city_name):
    prompt = f"Provide a detailed analysis of {city_name} including:\n1. Crime Index and safety statistics\n2. Accident rates and traffic safety information\n3. Overall safety assessment\n\nCity: {city_name}\nAnalysis:"
    return generate_response(prompt, max_length=1000)

def citizen_interaction(query):
    prompt = f"As a government assistant, provide accurate and helpful information about the following citizen query related to public services, government policies, or civic issues:\n\nQuery: {query}\nResponse:"
    return generate_response(prompt, max_length=1000)

css = """
:root {
    --primary: #8a63d2;
    --primary-dark: #6b4aa9;
    --secondary: #2d2d39;
    --secondary-dark: #1f1f28;
    --text: #e6e6e6;
    --text-muted: #a0a0a0;
    --card-bg: #252533;
    --input-bg: #2d2d39;
    --border: #3a3a4a;
}

.gradio-container {
    background: linear-gradient(135deg, #1a1a2a 0%, #2d2d39 100%) !important;
    color: var(--text) !important;
    font-family: 'Inter', 'Segoe UI', system-ui, sans-serif !important;
    max-width: 1000px !important;
    margin: auto !important;
    padding: 20px !important;
}

.dark-header {
    text-align: center;
    padding: 25px 20px;
    background: linear-gradient(135deg, var(--secondary-dark) 0%, var(--secondary) 100%);
    color: white;
    border-radius: 16px;
    margin-bottom: 20px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    border: 1px solid var(--border);
}

.dark-header h1 {
    font-weight: 700;
    font-size: 28px;
    margin: 0;
    background: linear-gradient(90deg, #a78bfa, #60a5fa);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    display: inline-block;
}

.dark-header p {
    margin: 8px 0 0 0;
    color: var(--text-muted);
    font-size: 16px;
}

.dark-panel {
    background: var(--card-bg) !important;
    border: 1px solid var(--border) !important;
    border-radius: 16px;
    padding: 20px;
    margin: 10px 0;
}

.dark-textbox {
    background: var(--input-bg) !important;
    color: var(--text) !important;
    border: 1px solid var(--border) !important;
    border-radius: 12px !important;
    padding: 16px !important;
}

.dark-textbox:focus {
    border-color: var(--primary) !important;
    box-shadow: 0 0 0 2px rgba(138, 99, 210, 0.2) !important;
}

.dark-button {
    background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%) !important;
    color: white !important;
    border: none !important;
    border-radius: 12px !important;
    padding: 12px 24px !important;
    font-weight: 600 !important;
    transition: all 0.2s ease !important;
}

.dark-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(138, 99, 210, 0.4) !important;
}

.dark-button-secondary {
    background: var(--secondary) !important;
    color: var(--text) !important;
    border: 1px solid var(--border) !important;
    border-radius: 12px !important;
    padding: 12px 24px !important;
    font-weight: 600 !important;
    transition: all 0.2s ease !important;
}

.dark-button-secondary:hover {
    background: var(--secondary-dark) !important;
    transform: translateY(-2px);
}

.dark-examples {
    background: var(--card-bg) !important;
    border: 1px solid var(--border) !important;
    border-radius: 16px;
    padding: 20px;
}

.dark-examples .example {
    background: var(--input-bg) !important;
    color: var(--text) !important;
    border: 1px solid var(--border) !important;
    border-radius: 12px;
    padding: 12px 16px;
    margin: 8px 0;
    cursor: pointer;
    transition: all 0.2s ease;
}

.dark-examples .example:hover {
    background: var(--secondary) !important;
    border-color: var(--primary);
}

.dark-footer {
    text-align: center;
    padding: 15px;
    color: var(--text-muted);
    font-size: 14px;
    margin-top: 20px;
}

.gr-tabs {
    border: none !important;
    background: transparent !important;
}

.gr-tab-item {
    background: var(--secondary) !important;
    color: var(--text) !important;
    border-radius: 12px 12px 0 0 !important;
    margin-right: 8px !important;
    border: 1px solid var(--border) !important;
    border-bottom: none !important;
}

.gr-tab-item.selected {
    background: var(--card-bg) !important;
    color: var(--primary) !important;
    font-weight: 600;
}

.tab-content {
    background: var(--card-bg) !important;
    border: 1px solid var(--border) !important;
    border-radius: 0 12px 12px 12px !important;
    padding: 20px;
    margin-top: -1px !important;
}

.output-textbox {
    background: var(--input-bg) !important;
    color: var(--text) !important;
    border: 1px solid var(--border) !important;
    border-radius: 12px;
    padding: 16px;
}

.gr-button {
    border: none !important;
}
"""

with gr.Blocks(css=css, theme=gr.themes.Default()) as app:
    gr.HTML("""
    <div class="dark-header">
        <h1>ðŸ¤– City Analysis & Citizen Services AI</h1>
        <p>Your intelligent assistant for city safety analysis and government services</p>
    </div>
    """)

    with gr.Tabs(elem_classes="gr-tabs"):
        with gr.TabItem("City Safety Analysis", elem_classes="gr-tab-item"):
            with gr.Column(elem_classes="tab-content"):
                gr.Markdown("## Analyze City Safety Metrics")

                with gr.Row():
                    with gr.Column():
                        city_input = gr.Textbox(
                            label="Enter City Name",
                            placeholder="e.g., New York, London, Mumbai...",
                            lines=1,
                            elem_classes="dark-textbox"
                        )
                        analyze_btn = gr.Button("Analyze City", variant="primary", elem_classes="dark-button")

                    with gr.Column():
                        city_output = gr.Textbox(
                            label="City Analysis Report",
                            lines=15,
                            interactive=False,
                            elem_classes="output-textbox"
                        )

                analyze_btn.click(city_analysis, inputs=city_input, outputs=city_output)

        with gr.TabItem("Citizen Services", elem_classes="gr-tab-item"):
            with gr.Column(elem_classes="tab-content"):
                gr.Markdown("## Government Services Assistant")

                with gr.Row():
                    with gr.Column():
                        citizen_query = gr.Textbox(
                            label="Your Question",
                            placeholder="Ask about public services, government policies, civic issues...",
                            lines=4,
                            elem_classes="dark-textbox"
                        )
                        query_btn = gr.Button("Get Information", variant="primary", elem_classes="dark-button")

                    with gr.Column():
                        citizen_output = gr.Textbox(
                            label="Government Response",
                            lines=15,
                            interactive=False,
                            elem_classes="output-textbox"
                        )

                query_btn.click(citizen_interaction, inputs=citizen_query, outputs=citizen_output)

    gr.HTML("""<div style="font-size: 16px; font-weight: 600; margin: 25px 0 15px 0; color: #e6e6e6;">Try These Examples</div>""")

    with gr.Row():
        with gr.Column():
            gr.HTML("""<div style="font-size: 14px; margin-bottom: 10px; color: #a0a0a0;">City Analysis Examples</div>""")
            examples_city = gr.Examples(
                examples=[
                    "New York",
                    "London",
                    "Tokyo",
                    "Mumbai",
                    "Delhi"
                ],
                inputs=city_input,
                label=""
            )

        with gr.Column():
            gr.HTML("""<div style="font-size: 14px; margin-bottom: 10px; color: #a0a0a0;">Citizen Service Examples</div>""")
            examples_service = gr.Examples(
                examples=[
                    "How do I apply for a passport?",
                    "What documents are needed for voter registration?",
                    "Information about public healthcare services",
                    "How to report a civic issue?",
                    "What are the current tax policies?"
                ],
                inputs=citizen_query,
                label=""
            )

    gr.HTML("""
    <div class="dark-footer">
        <p>Powered by IBM Granite â€¢ AI Government Services Assistant</p>
    </div>
    """)

app.launch(share=True)